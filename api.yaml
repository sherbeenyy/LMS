openapi: 3.0.0
info:
  title: LMS API
  version: 1.0.0
  description: |
    LMS API -- Library Management System

    This API provides a simple yet powerful backend for managing a libraryâ€™s books, customers, and sales receipts. The core purpose is to help library owners:

    - Track sales through detailed receipts.
    - Manage customer information efficiently.
    - Maintain and update book inventory (including stock and sales count).
    - Identify best-selling books based on real sales data.

    The API supports full CRUD operations on books and customers, secure user authentication via JWT, and detailed endpoints to manage and analyze receipt data.

    > Designed to power a minimal inventory and analytics dashboard for a library.
servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Auth
    description: Authentication operations
  - name: Books
    description: Operations related to books
  - name: Customers
    description: Operations related to customers
  - name: Receipts
    description: Operations related to receipts

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Book:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        price:
          type: number
        copiesInStock:
          type: integer
        totalSold:
          type: integer

    Customer:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        phone:
          type: string

    Receipt:
      type: object
      properties:
        _id:
          type: string
        customerName:
          type: string
        totalPrice:
          type: number
        bookItems:
          type: array
          items:
            type: object
            properties:
              bookId:
                type: string
              title:
                type: string
              price:
                type: number
              quantity:
                type: integer

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: User registered
        "400":
          description: Validation error

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login and receive JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login success with token
        "401":
          description: Unauthorized

  /books/add:
    post:
      tags:
        - Books
      summary: Add a new book
      security:
        - BearerAuth: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "201":
          description: Book added

  /books/all:
    get:
      tags:
        - Books
      summary: Get all books
      security:
        - BearerAuth: {}
      responses:
        "200":
          description: A list of books

  /books/{id}:
    get:
      tags:
        - Books
      summary: Get book by ID
      security:
        - BearerAuth: {}
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book found

    patch:
      tags:
        - Books
      summary: Update book by ID
      security:
        - BearerAuth: {}
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "200":
          description: Book updated

    delete:
      tags:
        - Books
      summary: Delete book by ID
      security:
        - BearerAuth: {}
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book deleted

  /customers/add:
    post:
      tags:
        - Customers
      summary: Add a new customer
      security:
        - BearerAuth: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          description: Customer added

  /customers/all:
    get:
      tags:
        - Customers
      summary: Get all customers
      security:
        - BearerAuth: {}
      responses:
        "200":
          description: List of customers

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get customer by ID
      security:
        - BearerAuth: {}
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Customer found

    patch:
      tags:
        - Customers
      summary: Update customer by ID
      security:
        - BearerAuth: {}
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "200":
          description: Customer updated

    delete:
      tags:
        - Customers
      summary: Delete customer by ID
      security:
        - BearerAuth: {}
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Customer deleted

  /receipts/add:
    post:
      tags:
        - Receipts
      summary: Create a new receipt
      security:
        - BearerAuth: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId:
                  type: string
                books:
                  type: array
                  items:
                    type: object
                    properties:
                      bookId:
                        type: string
                      quantity:
                        type: integer
      responses:
        "201":
          description: Receipt created

  /receipts/all:
    get:
      tags:
        - Receipts
      summary: Get all receipts
      security:
        - BearerAuth: {}
      responses:
        "200":
          description: List of receipts

  /receipts/{id}/edit:
    put:
      tags:
        - Receipts
      summary: Edit a receipt
      security:
        - BearerAuth: {}
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId:
                  type: string
                books:
                  type: array
                  items:
                    type: object
                    properties:
                      bookId:
                        type: string
                      quantity:
                        type: integer
      responses:
        "200":
          description: Receipt updated

  /receipts/bestsellers:
    get:
      tags:
        - Receipts
      summary: Get top 5 best-selling books
      security:
        - BearerAuth: {}
      responses:
        "200":
          description: Bestseller list
